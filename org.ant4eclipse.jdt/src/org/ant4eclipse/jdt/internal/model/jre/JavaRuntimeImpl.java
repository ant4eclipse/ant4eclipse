/**********************************************************************
 * Copyright (c) 2005-2008 ant4eclipse project team.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Nils Hartmann, Daniel Kasmeroglu, Gerd Wuetherich
 **********************************************************************/
package org.ant4eclipse.jdt.internal.model.jre;

import java.io.File;

import org.ant4eclipse.core.Assert;
import org.ant4eclipse.jdt.model.jre.JavaProfile;
import org.ant4eclipse.jdt.model.jre.JavaRuntime;

/**
 * <p>
 * Defines a java runtime environment.
 * </p>
 * 
 * @author Daniel Kasmeroglu (daniel.kasmeroglu@kasisoft.net)
 * @author Gerd W&uuml;therich (gerd@gerd-wuetherich.de)
 */
public class JavaRuntimeImpl implements JavaRuntime {

  /** the id */
  private String            _id                       = null;

  /** the location */
  private File              _location                 = null;

  /** the version */
  private Version           _javaVersion              = null;

  /** the version */
  private Version           _javaSpecificationVersion = null;

  /** - */
  private final JavaProfile _javaProfile;

  /** the libraries */
  private File[]            _libraries                = new File[0];

  /**
   * <p>
   * Creates a new instance of type {@link JavaRuntimeImpl}.
   * </p>
   * 
   * @param id
   * @param location
   * @param libraries
   * @param javaVersion
   * @param javaSpecificationVersion
   * @param javaProfile
   */
  JavaRuntimeImpl(final String id, final File location, final File[] libraries, final Version javaVersion,
      final Version javaSpecificationVersion, final JavaProfile javaProfile) {

    Assert.nonEmpty(id);
    Assert.isDirectory(location);
    Assert.notNull(libraries);
    Assert.notNull(javaVersion);
    Assert.notNull(javaSpecificationVersion);
    Assert.notNull(javaProfile);

    this._id = id;
    this._location = location;
    this._libraries = libraries;
    this._javaVersion = javaVersion;
    this._javaSpecificationVersion = javaSpecificationVersion;
    this._javaProfile = javaProfile;
  }

  /**
   * @see org.ant4eclipse.jdt.model.jre.JavaRuntime#getId()
   */
  public String getId() {
    return (this._id);
  }

  /**
   * @see org.ant4eclipse.jdt.model.jre.JavaRuntime#getLocation()
   */
  public File getLocation() {
    return (this._location);
  }

  /**
   * @see org.ant4eclipse.jdt.model.jre.JavaRuntime#getLibraries()
   */
  public File[] getLibraries() {
    return this._libraries;
  }

  /**
   * @see org.ant4eclipse.jdt.model.jre.JavaRuntime#isJavaVersion(net.sf.ant4eclipse.model.jdt.jre.JavaRuntimeImpl.Version
   *      )
   */
  public boolean isJavaVersion(final Version version) {
    return (version.getMajor() == this._javaVersion.getMajor()) && (version.getMinor() == this._javaVersion.getMinor());
  }

  /**
   * @see org.ant4eclipse.jdt.model.jre.JavaRuntime#getJavaVersion()
   */
  public Version getJavaVersion() {
    return this._javaVersion;
  }

  /**
   * @see org.ant4eclipse.jdt.model.jre.JavaRuntime#getSpecificationVersion()
   */
  public Version getSpecificationVersion() {
    return this._javaSpecificationVersion;
  }

  /**
   * @see org.ant4eclipse.jdt.model.jre.JavaRuntime#getJavaProfile()
   */
  public JavaProfile getJavaProfile() {
    return this._javaProfile;
  }

  /**
   * @generated by CodeSugar http://sourceforge.net/projects/codesugar
   */
  public String toString() {
    final StringBuffer buffer = new StringBuffer();
    buffer.append("[JavaRuntime:");
    buffer.append(" id: ");
    buffer.append(this._id);
    buffer.append(" javaVersion: ");
    buffer.append(this._javaVersion);
    buffer.append(" javaSpecificationVersion: ");
    buffer.append(this._javaSpecificationVersion);
    buffer.append(" javaProfile: ");
    buffer.append(this._javaProfile);
    buffer.append(" location: ");
    buffer.append(this._location);
    buffer.append(" { ");
    for (int i0 = 0; (this._libraries != null) && (i0 < this._libraries.length); i0++) {
      buffer.append(" libraries[" + i0 + "]: ");
      buffer.append(this._libraries[i0]);
    }
    buffer.append(" } ");
    buffer.append("]");
    return buffer.toString();
  }

} /* ENDCLASS */
