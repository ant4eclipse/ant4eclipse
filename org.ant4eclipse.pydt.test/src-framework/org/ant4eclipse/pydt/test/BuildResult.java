/**********************************************************************
 * Copyright (c) 2005-2009 ant4eclipse project team.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Nils Hartmann, Daniel Kasmeroglu, Gerd Wuetherich
 **********************************************************************/
package org.ant4eclipse.pydt.test;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.Project;

import java.io.File;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import junit.framework.Assert;

/**
 * Simple datacontainer used to collect the result of an executed build.
 * 
 * @author Daniel Kasmeroglu (Daniel.Kasmeroglu@Kasisoft.net)
 */
public class BuildResult {

  private BuildListener             _listener;

  private List<String>              _collected;

  private Map<String, List<String>> _collectedbytarget;

  private String                    _wsforward;

  private String                    _wsbackward;

  /**
   * Sets up this result which is generally used as a container for the information that comes up during the build
   * process.
   */
  public BuildResult(final File workspacedir) {
    _listener = new AntBuildListener();
    _collected = new ArrayList<String>();
    _collectedbytarget = new Hashtable<String, List<String>>();
    _wsforward = workspacedir.getAbsolutePath().replace('\\', '/');
    _wsbackward = workspacedir.getAbsolutePath().replace('/', '\\');
  }

  /**
   * Returns all output generated by the build process.
   * 
   * @return All output generated by the build process. Not <code>null</code>.
   */
  public String[] getOutput() {
    return _collected.toArray(new String[_collected.size()]);
  }

  /**
   * Returns all output generated by the build process within a specific target.
   * 
   * @return All output generated by the build process within a specific target. Not <code>null</code>.
   */
  public String[] getTargetOutput(final String target) {
    final List<String> content = _collectedbytarget.get(target);
    if (content == null) {
      return new String[0];
    }
    return content.toArray(new String[content.size()]);
  }

  /**
   * Associates this result with the supplied ant project, so this container will be filled with information when
   * necessary.
   * 
   * @param project
   *          The ant project needed to be monitored. Not <code>null</code>.
   */
  public void assign(final Project project) {
    Assert.assertNotNull(project);
    project.addBuildListener(_listener);
  }

  private void addLine(final List<String> list, String line) {
    line = replace(line, _wsforward, "${" + AntProperties.PROP_WORKSPACEDIR + "}");
    line = replace(line, _wsbackward, "${" + AntProperties.PROP_WORKSPACEDIR + "}");
    list.add(line);
  }

  private String replace(final String input, String search, String replacement) {
    int idx = input.indexOf(search);
    if (idx == -1) {
      return input;
    }
    String before = "";
    String after = "";
    if (idx > 0) {
      before = input.substring(0, idx);
    }
    if (idx + search.length() < input.length()) {
      after = input.substring(idx + search.length());
    }
    return before + replacement + replace(after, search, replacement);
  }

  /**
   * Custom implementation of a listener used to collect the build content.
   */
  private class AntBuildListener implements BuildListener {

    /**
     * {@inheritDoc}
     */
    public void buildFinished(BuildEvent evt) {
    }

    /**
     * {@inheritDoc}
     */
    public void buildStarted(BuildEvent evt) {
    }

    /**
     * {@inheritDoc}
     */
    public void messageLogged(BuildEvent evt) {
      addLine(BuildResult.this._collected, evt.getMessage());
      if (evt.getTarget() != null) {
        final String name = evt.getTarget().getName();
        List<String> list = BuildResult.this._collectedbytarget.get(name);
        if (list == null) {
          list = new ArrayList<String>();
          BuildResult.this._collectedbytarget.put(name, list);
        }
        addLine(list, evt.getMessage());
      }
    }

    /**
     * {@inheritDoc}
     */
    public void targetFinished(BuildEvent evt) {
    }

    /**
     * {@inheritDoc}
     */
    public void targetStarted(BuildEvent evt) {
    }

    /**
     * {@inheritDoc}
     */
    public void taskFinished(BuildEvent evt) {
    }

    /**
     * {@inheritDoc}
     */
    public void taskStarted(BuildEvent evt) {
    }

  } /* ENDCLASS */

} /* ENDCLASS */
