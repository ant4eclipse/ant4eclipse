<?xml version="1.0"?>
<project name="build"
         basedir="."
         xmlns:ant4eclipse="antlib:org.ant4eclipse"
         xmlns:antcontrib="antlib:net.sf.antcontrib">

	<!-- define antcontrib tasks -->
	<taskdef uri="antlib:net.sf.antcontrib"
	         resource="net/sf/antcontrib/antlib.xml" />

	<!-- define ant4eclipse tasks -->
	<taskdef uri="antlib:org.ant4eclipse"
	         resource="org/ant4eclipse/antlib.xml" />

	<!-- =================================
          target: buildPlugin
         ================================= -->
	<macrodef name="buildPlugin" description="builds a single plug-in project.">
		<attribute name="workspaceDirectory"
		           description="Absolute path of the workspace directory." />
		<attribute name="projectName"
		           description="The name of the eclipse plug-in project." />
		<attribute name="targetPlatformId"
		           description="The target platform id." />
		<attribute name="destination"
		           description="Name of the directory that will contain the plugin after building (same as the 'Destination directory' in the PDE-Export wizzard in Eclipse). The plugin will be built in to destDir/plugins/pluginName." />
		<attribute name="packageAsJar"
		           default="true"
		           description="If set to true the feature will be packaged as a jar file. Otherwise it will be an exploded directory" />
		<sequential>

			<!-- step 1: definition of some directory properties -->
			<property name="plugins.directory" value="plugins" />
			<property name="temp.directory" value="temp" />
			<property name="self.directory" value="@dot" />


			<!-- step 2: execute the plug-in project 
			     We use the ant4eclipse:executePluginProject task here to iterate over the 
			     src and out directories of the eclipse plug-in project -->
			<ant4eclipse:executePluginProject workspaceDirectory="@{workspaceDirectory}"
			                                  projectName="@{projectName}"
			                                  targetPlatformId="@{targetPlatformId}">

				<!-- step 2.1: scrub all output directories 
				      Each defined output directory has to be cleared before we start the build. -->
				<ant4eclipse:forEachOutputDirectory>
					<echo>Scrubbing directory '${executePluginProject.output.directory}'</echo>

					<delete dir="${executePluginProject.output.directory}"
					        quiet="true" />
					<mkdir dir="${executePluginProject.output.directory}" />
				</ant4eclipse:forEachOutputDirectory>

				<!-- step 2.2: compile the sources 
				     We use the ant4eclipse:forProject element to compile the sources. 
				     To support access restrictions and eclipse compiler warnings, we also use 
				     the ant4eclipse JDTCompilerAdapter within the javac task. -->
				<ant4eclipse:forProject>
					<echo>Compiling pde project '${executePluginProject.project.name}'</echo>
					<echo>  - source directories -> ${executePluginProject.source.directories}</echo>
					<echo>  - output directories -> ${executePluginProject.default.output.directory}</echo>
					<echo>  - bootclasspath      -> ${executePluginProject.boot.classpath}</echo>
					<echo>  - classpath          -> ${executePluginProject.classpath.absolute.compiletime}</echo>

					<javac destdir="${executePluginProject.default.output.directory}"
					       compiler="org.ant4eclipse.jdt.ecj.JDTCompilerAdapter">

						<src refid="executePluginProject.source.directories.path" />
						<bootclasspath refid="executePluginProject.boot.classpath.path" />
						<classpath refid="executePluginProject.classpath.absolute.compiletime.path" />

						<!-- we have to pass in the reference to the additional compiler arguments -->
						<compilerarg value="compiler.args.refid=executePluginProject.compiler.args"
						             compiler="org.ant4eclipse.jdt.ecj.JDTCompilerAdapter" />

						<!-- we also have to pass path of the compiler options file to support project specific compiler options -->
						<compilerarg value="compiler.options.file=${executePluginProject.project.directory}/.settings/org.eclipse.jdt.core.prefs"
						             compiler="org.ant4eclipse.jdt.ecj.JDTCompilerAdapter" />
					</javac>
				</ant4eclipse:forProject>

				<!-- step 2.3: copy all ressources from the source folders to the output folders 
				     This step copies all resources (non *.java files) from the source directories to
				     the source directories. -->
				<ant4eclipse:forEachSourceDirectory>
					<echo>Copying resources from directory '${executePluginProject.source.directory}' to '${executePluginProject.output.directory}'</echo>

					<copy todir="${executePluginProject.output.directory}">
						<fileset dir="${executePluginProject.source.directory}">
							<exclude name="**/*.java" />
						</fileset>
					</copy>
				</ant4eclipse:forEachSourceDirectory>

				<!-- step 2.4: pack the libraries 
				     Due to the fact that you can have several libraries within your PDE project, we have 
				     to pack the libraries before we pack the bundle itself -->
				<ant4eclipse:forEachLibrary>

					<!-- special case: 'self'-library 
					     The 'self'-library  is the bundle itself. -->
					<antcontrib:if>
						<istrue value="${executePluginProject.library.isSelf}" />
						<antcontrib:then>

							<ant4eclipse:executeLibrary workspace="@{workspaceDirectory}"
							                            projectname="${executePluginProject.project.name}"
							                            libraryname="${executePluginProject.library.name}"
							                            targetPlatformId="@{targetPlatformId}">

								<ant4eclipse:forEachOutputDirectory>
									<echo>Copying resources from directory '${executeLibrary.output.directory}'</echo>

									<copy todir="${executePluginProject.project.directory}/${self.directory}">
										<fileset dir="${executeLibrary.output.directory}" />
									</copy>
								</ant4eclipse:forEachOutputDirectory>

							</ant4eclipse:executeLibrary>

						</antcontrib:then>

						<!-- default case: "ordinary" library -->
						<antcontrib:else>

							<!-- copy the content of the library to a temporary folder -->
							<ant4eclipse:executeLibrary workspace="@{workspaceDirectory}"
							                            projectname="${executePluginProject.project.name}"
							                            libraryname="${executePluginProject.library.name}"
							                            targetPlatformId="@{targetPlatformId}">

								<ant4eclipse:forEachOutputDirectory>
									<echo>Copying resources from directory '${executeLibrary.output.directory}'</echo>
									<copy todir="@{destination}/${temp.directory}/${executePluginProject.library.name}">
										<fileset dir="${executeLibrary.output.directory}" />
									</copy>
								</ant4eclipse:forEachOutputDirectory>

							</ant4eclipse:executeLibrary>

							<!-- delete the library file if on exists -->
							<delete file="@{destination}/${plugins.directory}/${executePluginProject.library.name}/${executePluginProject.library.name}"
							        quiet="true" />
							<mkdir dir="@{destination}/${plugins.directory}/${executePluginProject.library.name}" />

							<!-- jar the library file if on exists -->
							<jar destfile="@{destination}/${plugins.directory}/${executePluginProject.library.name}/${executePluginProject.library.name}"
							     basedir="@{destination}/${temp.directory}/${executePluginProject.library.name}" />

							<!-- move the jar file to the pde project folder project -->
							<move file="@{destination}/${plugins.directory}/${executePluginProject.library.name}/${executePluginProject.library.name}"
							      todir="${executePluginProject.project.directory}" />

							<!-- finally delete the temp file -->
							<delete dir="@{destination}/${plugins.directory}/${executePluginProject.library.name}" />
							<delete dir="@{destination}/${temp.directory}/" />

						</antcontrib:else>
					</antcontrib:if>

				</ant4eclipse:forEachLibrary>

				<!-- step 2.5: pack the bundle 
				     Finally we have to pack the bundle. We use the ant4eclipse:pdeProjectFileSet here to copy all 
				     specified files to the bundle. -->
				<ant4eclipse:forProject>

					<!-- step 2.5.1: copy the (in the build.properties) specified content to the destination directory -->
					<copy todir="@{destination}/${plugins.directory}/${executePluginProject.project.name}_${executePluginProject.bundle.effective.version}"
					      overwrite="true">

						<!-- file set defined by the projects build properties -->
						<ant4eclipse:pdeProjectFileSet workspace="@{workspaceDirectory}"
						                               projectname="${executePluginProject.project.name}"
						                               includes="${executePluginProject.build.properties.binary.includes}"
						                               excludes="${executePluginProject.build.properties.binary.excludes}" />
					</copy>

					<!-- delete the (temporary) self-directory -->
					<delete dir="${executePluginProject.project.directory}/${self.directory}"
					        quiet="true" />

					<!-- 'patch' the manifest with the effective bundle version -->
					<manifest file="@{destination}/${plugins.directory}/${executePluginProject.project.name}_${executePluginProject.bundle.effective.version}/META-INF/MANIFEST.MF"
					          mode="update">
						<attribute name="Bundle-Version"
						           value="${executePluginProject.bundle.effective.version}" />
					</manifest>

					<!-- if bundle should be packaged as a jar file (the default), we have to jar 
					     the bundle in the next step. -->
					<antcontrib:if>
						<istrue value="@{packageAsJar}" />
						<antcontrib:then>

							<jar destfile="@{destination}/${plugins.directory}/${executePluginProject.project.name}_${executePluginProject.bundle.effective.version}.jar"
							     basedir="@{destination}/${plugins.directory}/${executePluginProject.project.name}_${executePluginProject.bundle.effective.version}"
							     manifest="@{destination}/${plugins.directory}/${executePluginProject.project.name}_${executePluginProject.bundle.effective.version}/META-INF/MANIFEST.MF" />

							<delete dir="@{destination}/${plugins.directory}/${executePluginProject.project.name}_${executePluginProject.bundle.effective.version}" />

						</antcontrib:then>
					</antcontrib:if>

				</ant4eclipse:forProject>

			</ant4eclipse:executePluginProject>
		</sequential>
	</macrodef>

	<!-- =================================
          target      : buildFeature
          description : Builds an eclipse feature project. Each contained plug-in project will be build.
         ================================= -->
	<macrodef name="buildFeature">
		<attribute name="workspaceDirectory"
		           description="Absolute path of the workspace directory." />
		<attribute name="projectName"
		           description="The name of the eclipse plug-in project."
		           default="" />
		<attribute name="featureId"
		           description="The id of the feature"
		           default="" />
		<attribute name="featureVersion"
		           description="The version of the feature"
		           default="" />
		<attribute name="targetPlatformId"
		           description="The target platform id." />
		<attribute name="destination"
		           description="Name of the directory that will contain the feature after building (same as the 'Destination directory' in the eclipse PDE Export Wizard)." />
		<attribute name="clearDestination"
		           description="If set to true the destination will be cleared."
		           default="false" />
		<attribute name="skipBuildFeature"
		           default="false"
		           description="Set to true if the feature itself should not be built. In this case the task only builds the defined plugins but won't build the feature." />
		<attribute name="packageAsJar"
		           default="true"
		           description="If set to true the feature will be packaged as a jar file. Otherwise it will be an exploded directory" />

		<sequential>

			<!-- executes the defined feature -->
			<ant4eclipse:executeFeature workspaceDirectory="@{workspaceDirectory}"
			                            projectName="@{projectName}"
			                            featureId="@{featureId}"
			                            featureVersion="@{featureVersion}"
			                            targetPlatformId="@{targetPlatformId}">

				<!-- Step 1: Scrub destination directory  -->
				<ant4eclipse:forRootFeature>
					<antcontrib:if>
						<istrue value="@{clearDestination}" />
						<antcontrib:then>
							<echo>Scrubbing directory '@{destination}'</echo>

							<delete dir="@{destination}" quiet="true" />
							<mkdir dir="@{destination}" />
						</antcontrib:then>
					</antcontrib:if>
				</ant4eclipse:forRootFeature>

				<!-- Step 2: execute included features  -->
				<ant4eclipse:forEachIncludedFeature>

					<buildFeature workspaceDirectory="@{workspaceDirectory}"
					              featureId="${executeFeatureProject.includes.id}"
					              featureVersion="${executeFeatureProject.includes.effective.version}"
					              targetPlatformId="@{targetPlatformId}"
					              destination="@{destination}"
					              packageAsJar="@{packageAsJar}" />

					<echo>${executeFeatureProject.includes.version}</echo>
					<echo>${executeFeatureProject.includes.effective.version}</echo>
				</ant4eclipse:forEachIncludedFeature>

				<!-- Step 3: Process each defined plug-in  -->
				<ant4eclipse:forEachPlugin>
					<antcontrib:if>
						<istrue value="${executeFeatureProject.plugin.isSource}" />
						<antcontrib:then>
							<echo>Building plug-in project '${executeFeatureProject.plugin.filename} (${executeFeatureProject.plugin.id}_${executeFeatureProject.plugin.resolvedversion})' </echo>

							<buildPlugin workspaceDirectory="@{workspaceDirectory}"
							             projectName="${executeFeatureProject.plugin.filename}"
							             targetplatformid="@{targetPlatformId}"
							             destination="@{destination}" />
						</antcontrib:then>
						<antcontrib:else>
							<echo>Copying bundle '${executeFeatureProject.plugin.file} (${executeFeatureProject.plugin.id}_${executeFeatureProject.plugin.resolvedversion})' </echo>

							<copy todir="@{destination}/${plugins.directory}"
							      file="${executeFeatureProject.plugin.file}"
							      flatten="true" />
						</antcontrib:else>
					</antcontrib:if>

				</ant4eclipse:forEachPlugin>

				<!-- Step 4: Build feature itself -->
				<ant4eclipse:forRootFeature>

					<!-- skip this step if parameter '@{skipBuildFeature}' is 'true' -->
					<antcontrib:if>
						<isfalse value="@{skipBuildFeature}" />
						<antcontrib:then>

							<!-- Step 4.1: Copy all files defined in the build.properties to the destination directory  -->
							<copy todir="@{destination}/features/${executeFeatureProject.feature.id}_${executeFeatureProject.feature.effective.version}"
							      overwrite="true">

								<!-- file set defined by the projects build properties -->
								<ant4eclipse:pdeProjectFileSet workspace="@{workspaceDirectory}"
								                               projectname="@{projectName}"
								                               includes="${executeFeatureProject.build.properties.binary.includes}"
								                               excludes="${executeFeatureProject.build.properties.binary.excludes}" />
							</copy>

							<!-- Step 4.2: Patch the feature.xml -->
							<ant4eclipse:patchFeatureManifest featureXmlFile="@{destination}/features/${executeFeatureProject.feature.id}_${executeFeatureProject.feature.effective.version}/feature.xml"
							                                  pluginVersions="${executeFeatureProject.feature.plugins.effective.versions}" />

							<!-- Step 4.3: Package the feature as a jar -->
							<antcontrib:if>

								<!-- skip this step if 'packageAsJar' is 'false' -->
								<istrue value="@{packageAsJar}" />
								<antcontrib:then>

									<!-- jar the feature -->
									<jar destfile="@{destination}/features/${executeFeatureProject.feature.id}_${executeFeatureProject.feature.effective.version}.jar"
									     basedir="@{destination}/features/${executeFeatureProject.feature.id}_${executeFeatureProject.feature.effective.version}" />

									<!-- delete the base directory -->
									<delete dir="@{destination}/features/${executeFeatureProject.feature.id}_${executeFeatureProject.feature.effective.version}" />

								</antcontrib:then>
							</antcontrib:if>
						</antcontrib:then>
					</antcontrib:if>
				</ant4eclipse:forRootFeature>

			</ant4eclipse:executeFeature>

		</sequential>
	</macrodef>
</project>